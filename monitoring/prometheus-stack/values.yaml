# Best-in-class Prometheus Stack Configuration
prometheus:
  prometheusSpec:
    # Storage configuration
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 50Gi
    # Resource management
    resources:
      requests:
        memory: 2Gi
        cpu: 500m
      limits:
        memory: 8Gi
        cpu: 2000m
    # Retention and evaluation
    retention: 15d
    retentionSize: 45GB
    evaluationInterval: 30s
    scrapeInterval: 30s
    # Enable external labels for Thanos
    externalLabels:
      cluster: k3s-cluster
      region: local
    # Additional scrape configs for comprehensive monitoring
    additionalScrapeConfigs:
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
# Enhanced Alertmanager configuration
alertmanager:
  enabled: true
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 10Gi
    resources:
      requests:
        memory: 200Mi
        cpu: 100m
      limits:
        memory: 500Mi
        cpu: 300m
    # Basic alerting configuration
    config:
      global:
        smtp_smarthost: 'smtp.example.com:587'
        smtp_from: 'alertmanager@example.com'
        smtp_auth_username: 'your-smtp-username'
        smtp_auth_password: 'your-smtp-password'
      route:
        group_by: ['alertname', 'job']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 4h
        receiver: 'default-receiver'
      receivers:
        - name: 'default-receiver'
          email_configs:
            - to: 'team-alerts@example.com'
              send_resolved: true
          webhook_configs:
            - url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
              send_resolved: true
            - url: 'http://your-alert-collector.example.com/webhook'
              send_resolved: true
# Enhanced Grafana configuration with best practices
grafana:
  enabled: true
  persistence:
    enabled: true
    storageClassName: longhorn
    size: 10Gi
  resources:
    requests:
      memory: 200Mi
      cpu: 100m
    limits:
      memory: 500Mi
      cpu: 500m
  # Admin credentials
  adminPassword: prometheus-stack-admin
  # Enhanced configuration
  grafana.ini:
    server:
      root_url: "https://grafana.vanillax.xyz"
    security:
      allow_embedding: true
    users:
      allow_sign_up: false
      auto_assign_org: true
      auto_assign_org_role: Viewer
    auth.anonymous:
      enabled: false
    log:
      mode: console
      level: info
  # Data sources configuration
  sidecar:
    datasources:
      enabled: true
      defaultDatasourceEnabled: true
  # Additional data sources for Loki and Tempo
  additionalDataSources:
    - name: Loki
      type: loki
      url: http://loki-gateway.monitoring.svc.cluster.local
      isDefault: false
      jsonData:
        maxLines: 1000
    - name: Tempo
      type: tempo
      url: http://tempo.monitoring.svc.cluster.local:3100
      isDefault: false
      jsonData:
        tracesToLogs:
          datasourceUid: loki
          tags: ['job', 'instance', 'pod', 'namespace']
        tracesToMetrics:
          datasourceUid: prometheus
          tags: [{key: 'service.name', value: 'service'}, {key: 'service.namespace', value: 'namespace'}]
        serviceMap:
          datasourceUid: prometheus
# Node Exporter with full system monitoring
prometheus-node-exporter:
  enabled: true
  resources:
    requests:
      memory: 50Mi
      cpu: 50m
    limits:
      memory: 100Mi
      cpu: 100m
# Kube State Metrics for Kubernetes object metrics
kube-state-metrics:
  enabled: true
  resources:
    requests:
      memory: 100Mi
      cpu: 50m
    limits:
      memory: 200Mi
      cpu: 200m
  collectors:
    - certificatesigningrequests
    - configmaps
    - cronjobs
    - daemonsets
    - deployments
    - endpoints
    - horizontalpodautoscalers
    - ingresses
    - jobs
    - limitranges
    - mutatingwebhookconfigurations
    - namespaces
    - networkpolicies
    - nodes
    - persistentvolumeclaims
    - persistentvolumes
    - poddisruptionbudgets
    - pods
    - replicasets
    - replicationcontrollers
    - resourcequotas
    - secrets
    - services
    - statefulsets
    - storageclasses
    - validatingwebhookconfigurations
    - volumeattachments
# Prometheus Operator configuration
prometheusOperator:
  enabled: true
  resources:
    requests:
      memory: 200Mi
      cpu: 100m
    limits:
      memory: 500Mi
      cpu: 500m
  # Enable additional CRDs
  prometheusConfigReloader:
    resources:
      requests:
        memory: 50Mi
        cpu: 50m
      limits:
        memory: 100Mi
        cpu: 100m
# Enhanced default rules with comprehensive alerting
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true
# Service monitors for comprehensive metrics collection
kubeApiServer:
  enabled: true
kubelet:
  enabled: true
  serviceMonitor:
    metricRelabelings:
      - sourceLabels: [__name__]
        regex: 'kubelet_(pod_worker_latency_microseconds|pod_start_latency_microseconds|cgroup_manager_latency_microseconds|pod_worker_start_latency_microseconds|pleg_relist_latency_microseconds|pleg_relist_interval_microseconds|runtime_operations|runtime_operations_latency_microseconds|runtime_operations_errors|eviction_stats_age_microseconds|device_plugin_registration_count|device_plugin_alloc_latency_microseconds|network_plugin_operations_latency_microseconds)'
        action: drop
kubeControllerManager:
  enabled: true
coreDns:
  enabled: true
kubeEtcd:
  enabled: true
kubeScheduler:
  enabled: true
kubeProxy:
  enabled: true
nodeExporter:
  enabled: false # We use prometheus-node-exporter instead
