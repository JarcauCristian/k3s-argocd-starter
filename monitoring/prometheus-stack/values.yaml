# Enhanced kube-prometheus-stack configuration
# OPTIMIZED FOR HOMELAB (NUC + RPi5)
# - Reduced resource requirements
# - Shorter retention periods
# - Single replica deployments
# - Minimal storage requirements

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
# CRD Configuration - Essential for proper functioning
crds:
  enabled: true
# Prometheus Configuration
prometheus:
  enabled: true
  prometheusSpec:
    # Data retention and storage - Optimized for homelab
    retention: 7d
    retentionSize: 5GB
    walCompression: true
    # Storage configuration with Longhorn - Optimized for homelab
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi
    # Resource allocation - Optimized for NUC + RPi5
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1Gi
    # Security context
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      fsGroup: 65534
    # Scrape configuration - Optimized for homelab
    scrapeInterval: 60s
    evaluationInterval: 60s
    scrapeTimeout: 15s
    # Enable service discovery for dynamic targets
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    # Additional scrape configs for custom monitoring
    additionalScrapeConfigs: []
    # Remote write configuration (for external storage if needed)
    remoteWrite: []
    # Alerting configuration
    alerting:
      alertmanagers:
        - namespace: prometheus-stack
          name: kube-prometheus-stack-alertmanager
          port: 9093
# Alertmanager Configuration
alertmanager:
  enabled: true
  alertmanagerSpec:
    # Storage for alertmanager
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 2Gi
    # Resource allocation
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 512Mi
    # Security context
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      fsGroup: 65534
    # Retention
    retention: 72h
    # Configuration for alert routing (placeholder)
    configSecret: ""
# Grafana Configuration
grafana:
  enabled: true
  # Admin credentials - CHANGE THIS PASSWORD!
  adminPassword: "prom-operator"
  # Persistence - Optimized for homelab
  persistence:
    enabled: true
    storageClassName: longhorn
    size: 2Gi
    accessModes:
      - ReadWriteOnce
  # Resource allocation - Optimized for homelab
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 472
    fsGroup: 472
  # Enable plugins
  plugins:
    - grafana-piechart-panel
    - grafana-worldmap-panel
    - grafana-clock-panel
  # Default dashboards
  defaultDashboardsEnabled: true
  defaultDashboardsTimezone: UTC
  # Additional data sources configuration
  additionalDataSources:
    - name: Loki
      type: loki
      access: proxy
      url: http://loki-gateway.loki-stack.svc.cluster.local
      jsonData:
        timeout: 60
        maxLines: 1000
        derivedFields:
          - datasourceUid: prometheus-uid
            matcherRegex: "(?:logger=rpc\\.server|report).*?(?:traceID|trace_id)=([a-f\\d]+)"
            name: TraceID
            url: "$${__value.raw}"
    - name: Tempo
      type: tempo
      access: proxy
      url: http://tempo-gateway.tempo-stack.svc.cluster.local
      jsonData:
        httpMethod: GET
        serviceMap:
          datasourceUid: prometheus-uid
        tracesToLogs:
          datasourceUid: loki-uid
          tags: ['job', 'instance', 'pod', 'namespace']
          mappedTags: [{key: 'service.name', value: 'service'}]
          mapTagNamesEnabled: false
          spanStartTimeShift: '1h'
          spanEndTimeShift: '-1h'
          filterByTraceID: false
          filterBySpanID: false
  # Grafana configuration
  grafana.ini:
    server:
      root_url: https://grafana.vanillax.xyz
    security:
      allow_embedding: true
      cookie_secure: true
      strict_transport_security: true
    analytics:
      reporting_enabled: false
      check_for_updates: false
    snapshots:
      external_enabled: false
    explore:
      enabled: true
    feature_toggles:
      enable: correlations
# Node Exporter Configuration
# Enable for comprehensive node-level metrics
nodeExporter:
  enabled: true
  hostRootFsMount:
    enabled: true
    mountPropagation: HostToContainer
  # Resource allocation
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 180Mi
# kube-state-metrics Configuration
kubeStateMetrics:
  enabled: true
  # Resource allocation
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 256Mi
# Prometheus Operator Configuration
prometheusOperator:
  enabled: true
  # Resource allocation - Optimized for homelab
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 256Mi
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
# Additional monitoring components
kubelet:
  enabled: true
  serviceMonitor:
    interval: 30s
kubeApiServer:
  enabled: true
  serviceMonitor:
    interval: 30s
kubeControllerManager:
  enabled: true
  serviceMonitor:
    interval: 30s
kubeScheduler:
  enabled: true
  serviceMonitor:
    interval: 30s
kubeEtcd:
  enabled: true
  serviceMonitor:
    interval: 30s
coreDns:
  enabled: true
  serviceMonitor:
    interval: 30s
kubeDns:
  enabled: false
